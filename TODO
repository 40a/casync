BEFORE FIRST BLOG STORY:
* fuse mount logic
* hardlink from seed
* replace adler32 by something better (buzhash)
* propagate feature flags into index, and then into seed

LATER:
* verify
* diff
* save/restore btrfs file/subvol flags
* save/restore hardlinks?
* check fs features when restoring
* encryption: aes256 of rotating hash function + HMAC for identifying chunks + individually encrypted chunks
* exclude patterns
* build seed while extracting
* optionally make seeds persistent
* stop at mount points
* acquire gpg signature along with caidx/caibx/catar
* coalesce index frames sent over protocol
* rework uploading via ssh to use seed instead of cache store for providing chunks to server
* casync-http: parallel http GETs
* casync-http: try all configured stores one after the other before sending MISSING
* add support for compressed index files and archive files
* define mime types for our files
* define http-based url protocol prefix for caibx+caidx
* support accessing base trees through native protocol
* implicitly generate index + chunks when accessing base trees or archives through native protocol
* rework caindex to read multiple chunks per read (use reallocbuffer like elsewhere)
* permit 511 (or 4095?) redundant NUL bytes at the end of archive and index files, so that they could in theory stored on block devices
* archive digest can't sanely process subdirectories right now, since it will include trailing data that belongs to the next objects already
* seed: cache GOODBYE name table data so that we can regenerate the right bits when needed
* when extracting, optionally make use of reduced feature bits than the archive contains
* optionally import from/export to classic tar ball (and zip?)
* optionally interpret aufs/union mount whiteout files?
* in mkdev and mount: issue sd_notify(READY=1) when ready
* mkdev: generate named device node symlinks cleanly via udev rule
